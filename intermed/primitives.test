#!/bin/sh
# -*- tcl -*-
# The next line is executed by /bin/sh, but not tcl \
exec tclsh "$0" ${1+"$@"}

#    This software is Copyright by the Board of Trustees of Michigan
#    State University (c) Copyright 2014.
#
#    You may use this software under the terms of the GNU public license
#    (GPL).  The terms of this license are described at:
#
#     http://www.gnu.org/licenses/gpl.txt
#
#    Authors:
#             Ron Fox
#             Jeromy Tompkins 
#	     NSCL
#	     Michigan State University
#	     East Lansing, MI 48824-1321


##
# @file primitives.test
# @brief Tcl tests for the primitives symboltable generators.
# @author Ron Fox <fox@nscl.msu.edu>
#

package require tcltest
source  [file join [file dirname [info script]] primitives.tcl]


set ::testRegistrar [list];          # We'll use this as the test registrar.

##
# utility proc to clear the registrar.
#

proc clearRegistrar {} {
    foreach obj $::testRegistrar {
        $obj destroy
    }
    set ::testRegistrar [list]
}

##
# utility to dump the symbol table for all items in the registrar:
#
proc dumpRegistrar {} {
    set result [dict create ]
    foreach obj $::testRegistrar {
        set name [string trim $obj :];    # Remove global namespace specifier.
        dict set result $name [$obj dump]
    }
    return $result
}
#------------------------------------------------------------------------------
# value tests

tcltest::test v_default_1 {Make a default single item} \
-cleanup {
    clearRegistrar
} \
-setup {
    value setRegistrar ::testRegistrar
} \
-body {
    value a;           # Makes the symbol table for a
    dumpRegistrar;     # should get the dict back out.
} -result [dict create a [dict create type value low 0 high 100 bins 100 units ""]]

tcltest::test v_default_2 {Make two default items} \
-cleanup {
    clearRegistrar
} \
-setup {
    value setRegistrar ::testRegistrar
} \
-body {
    value b
    value a
    dumpRegistrar;       # Should get the two dicts in order b then a:
} -result [dict create \
    b [dict create type value low 0 high 100 bins 100 units ""]   \
    a [dict create type value low 0 high 100 bins 100 units ""]]

tcltest::test v_specify_1 {Specify value metadata:} \
-cleanup {
    clearRegistrar
} \
-setup {
    value setRegistrar ::testRegistrar
} \
-body {
    value a -low 100 -high 200 -bins 201 -units made-up
    dumpRegistrar;
} -result [dict create  \
    a [dict create type value low 100 high 200 bins 201 units "made-up"]]


#-------------------------------------------------------------------------------
#   Array tests:

tcltest::test array_default_1 {Instantiate an array with default specifications:} \
-cleanup {
    clearRegistrar
} \
-setup {
    Array setRegistrar ::testRegistrar
} \
-body {
    Array a 10
    dumpRegistrar
} -result [dict create                                                    \
     a [dict create type array low 0 high 100 bins 100 units "" elements 10] \
    ]


tcltest::test array_default_2 {Make a couple of arrays with default specs:} \
-cleanup {
    clearRegistrar
} \
-setup {
    Array setRegistrar ::testRegistrar
} \
-body {
    Array b 10
    Array a 10
    dumpRegistrar
} -result [dict create \
    b [dict create type array low 0 high 100 bins 100 units "" elements 10] \
    a [dict create type array low 0 high 100 bins 100 units "" elements 10] \
]

tcltest::test array_specify_1 {Specify all aspects of an array} \
-cleanup {
    clearRegistrar
} \
-setup {
    Array setRegistrar ::testRegistrar
} \
-body {
    Array a 15 -low -10 -high 10 -bins 21 -units "megafurlongs"
    dumpRegistrar
} -result [dict create                                            \
    a [dict create type array low -10 high 10 bins 21 units megafurlongs elements 15] \
]

tcltest::test mixed_default_1 {Make var and array mixed with default instantiations} \
-cleanup {
    clearRegistrar
} \
-setup {
    setPrimitiveRegistrars ::testRegistrar
} \
-body {
    value a
    Array b 10
    
    dumpRegistrar
} -result [dict create     \
    a [dict create type value low 0 high 100 bins 100 units ""]     \
    b [dict create type array low 0 high 100 bins 100 units "" elements 10] \
]
#-------------------------------------------------------------------------------
tcltest::cleanupTests